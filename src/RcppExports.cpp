// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// estimateLong_cpp
List estimateLong_cpp(Rcpp::List in_list);
RcppExport SEXP _ngme_estimateLong_cpp(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateLong_cpp(in_list));
    return rcpp_result_gen;
END_RCPP
}
// estimateFisher
List estimateFisher(Rcpp::List in_list);
RcppExport SEXP _ngme_estimateFisher(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateFisher(in_list));
    return rcpp_result_gen;
END_RCPP
}
// estimateProcesses_cpp
List estimateProcesses_cpp(Rcpp::List in_list);
RcppExport SEXP _ngme_estimateProcesses_cpp(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateProcesses_cpp(in_list));
    return rcpp_result_gen;
END_RCPP
}
// fisher_cpp
List fisher_cpp(Rcpp::List in_list);
RcppExport SEXP _ngme_fisher_cpp(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(fisher_cpp(in_list));
    return rcpp_result_gen;
END_RCPP
}
// predictLong_cpp
List predictLong_cpp(Rcpp::List in_list);
RcppExport SEXP _ngme_predictLong_cpp(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(predictLong_cpp(in_list));
    return rcpp_result_gen;
END_RCPP
}
// rGIG_cpp
Eigen::VectorXd rGIG_cpp(Eigen::VectorXd p, Eigen::VectorXd a, Eigen::VectorXd b, unsigned long seed);
RcppExport SEXP _ngme_rGIG_cpp(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rGIG_cpp(p, a, b, seed));
    return rcpp_result_gen;
END_RCPP
}
// simulateLongGH_cpp
List simulateLongGH_cpp(Rcpp::List in_list);
RcppExport SEXP _ngme_simulateLongGH_cpp(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateLongGH_cpp(in_list));
    return rcpp_result_gen;
END_RCPP
}
// simulateLongME_cpp
List simulateLongME_cpp(Rcpp::List in_list);
RcppExport SEXP _ngme_simulateLongME_cpp(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateLongME_cpp(in_list));
    return rcpp_result_gen;
END_RCPP
}
// getDuplicateM
Eigen::MatrixXi getDuplicateM(const int n);
RcppExport SEXP _ngme_getDuplicateM(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(getDuplicateM(n));
    return rcpp_result_gen;
END_RCPP
}
// test_d2_process
Rcpp::List test_d2_process(Rcpp::List Y, Rcpp::List process_list, Rcpp::List operator_list);
RcppExport SEXP _ngme_test_d2_process(SEXP YSEXP, SEXP process_listSEXP, SEXP operator_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type process_list(process_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type operator_list(operator_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_d2_process(Y, process_list, operator_list));
    return rcpp_result_gen;
END_RCPP
}
// test_sampling_NIG
Rcpp::List test_sampling_NIG(Rcpp::List mixedEffect_list, Rcpp::List meas_list, int nsamples);
RcppExport SEXP _ngme_test_sampling_NIG(SEXP mixedEffect_listSEXP, SEXP meas_listSEXP, SEXP nsamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mixedEffect_list(mixedEffect_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type meas_list(meas_listSEXP);
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_sampling_NIG(mixedEffect_list, meas_list, nsamples));
    return rcpp_result_gen;
END_RCPP
}
// test_logf_NIG
double test_logf_NIG(const Eigen::VectorXd& U, const Eigen::VectorXd& mu, const Eigen::VectorXd& delta, const Eigen::MatrixXd& iSigma, const double nu);
RcppExport SEXP _ngme_test_logf_NIG(SEXP USEXP, SEXP muSEXP, SEXP deltaSEXP, SEXP iSigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type iSigma(iSigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(test_logf_NIG(U, mu, delta, iSigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// test_logf_GH
double test_logf_GH(const Eigen::VectorXd& U, const Eigen::VectorXd& mu, const Eigen::VectorXd& delta, const Eigen::MatrixXd& iSigma, const double p, const double a, const double b);
RcppExport SEXP _ngme_test_logf_GH(SEXP USEXP, SEXP muSEXP, SEXP deltaSEXP, SEXP iSigmaSEXP, SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type iSigma(iSigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(test_logf_GH(U, mu, delta, iSigma, p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// test_dU_EiV
Rcpp::List test_dU_EiV(const Eigen::VectorXd& U, const Eigen::MatrixXd& Sigma, const Eigen::VectorXd& delta, const Eigen::VectorXd& mu, const double p_GIG, const double a_GIG, const double b_GIG, const Eigen::VectorXd& res, const Eigen::MatrixXd& Q_noise, const Eigen::MatrixXd& B);
RcppExport SEXP _ngme_test_dU_EiV(SEXP USEXP, SEXP SigmaSEXP, SEXP deltaSEXP, SEXP muSEXP, SEXP p_GIGSEXP, SEXP a_GIGSEXP, SEXP b_GIGSEXP, SEXP resSEXP, SEXP Q_noiseSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p_GIG(p_GIGSEXP);
    Rcpp::traits::input_parameter< const double >::type a_GIG(a_GIGSEXP);
    Rcpp::traits::input_parameter< const double >::type b_GIG(b_GIGSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type res(resSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Q_noise(Q_noiseSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(test_dU_EiV(U, Sigma, delta, mu, p_GIG, a_GIG, b_GIG, res, Q_noise, B));
    return rcpp_result_gen;
END_RCPP
}
// test_db_EiV_GIG
double test_db_EiV_GIG(double p, double a, double b);
RcppExport SEXP _ngme_test_db_EiV_GIG(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(test_db_EiV_GIG(p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// test_EiV_NGIG
double test_EiV_NGIG(Eigen::VectorXd& U, Eigen::MatrixXd& Sigma, Eigen::VectorXd& delta, Eigen::VectorXd& mu, double p, double a, double b);
RcppExport SEXP _ngme_test_EiV_NGIG(SEXP USEXP, SEXP SigmaSEXP, SEXP deltaSEXP, SEXP muSEXP, SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(test_EiV_NGIG(U, Sigma, delta, mu, p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// test_EiV_GIG
double test_EiV_GIG(double p, double a, double b);
RcppExport SEXP _ngme_test_EiV_GIG(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(test_EiV_GIG(p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// test_PreDiagsolver
double test_PreDiagsolver(Rcpp::List in_list);
RcppExport SEXP _ngme_test_PreDiagsolver(SEXP in_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type in_list(in_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_PreDiagsolver(in_list));
    return rcpp_result_gen;
END_RCPP
}
// sampleR
Eigen::VectorXi sampleR(int n, Eigen::VectorXd w_in);
RcppExport SEXP _ngme_sampleR(SEXP nSEXP, SEXP w_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w_in(w_inSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleR(n, w_in));
    return rcpp_result_gen;
END_RCPP
}
// sample_internalR
Rcpp::List sample_internalR(int n, Eigen::VectorXd p_in, Eigen::VectorXd selected_in, Eigen::VectorXd w_in);
RcppExport SEXP _ngme_sample_internalR(SEXP nSEXP, SEXP p_inSEXP, SEXP selected_inSEXP, SEXP w_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p_in(p_inSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type selected_in(selected_inSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w_in(w_inSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_internalR(n, p_in, selected_in, w_in));
    return rcpp_result_gen;
END_RCPP
}
// test_mixed
Rcpp::List test_mixed(int niter, Rcpp::List Y, Rcpp::List mixed_list, Rcpp::List error_list);
RcppExport SEXP _ngme_test_mixed(SEXP niterSEXP, SEXP YSEXP, SEXP mixed_listSEXP, SEXP error_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mixed_list(mixed_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type error_list(error_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_mixed(niter, Y, mixed_list, error_list));
    return rcpp_result_gen;
END_RCPP
}
// test_error
Rcpp::List test_error(int niter, Rcpp::List Y, Rcpp::List error_list);
RcppExport SEXP _ngme_test_error(SEXP niterSEXP, SEXP YSEXP, SEXP error_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type error_list(error_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_error(niter, Y, error_list));
    return rcpp_result_gen;
END_RCPP
}
// test_mixed_Fisher
Rcpp::List test_mixed_Fisher(int niter, Rcpp::List Y, Rcpp::List mixed_list, Rcpp::List error_list);
RcppExport SEXP _ngme_test_mixed_Fisher(SEXP niterSEXP, SEXP YSEXP, SEXP mixed_listSEXP, SEXP error_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mixed_list(mixed_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type error_list(error_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_mixed_Fisher(niter, Y, mixed_list, error_list));
    return rcpp_result_gen;
END_RCPP
}
// test_process
Rcpp::List test_process(int niter, Rcpp::List U, Rcpp::List process_list);
RcppExport SEXP _ngme_test_process(SEXP niterSEXP, SEXP USEXP, SEXP process_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type process_list(process_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_process(niter, U, process_list));
    return rcpp_result_gen;
END_RCPP
}
// test_Mprocess
Rcpp::List test_Mprocess(int niter, Rcpp::List U, Rcpp::List process_list);
RcppExport SEXP _ngme_test_Mprocess(SEXP niterSEXP, SEXP USEXP, SEXP process_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type process_list(process_listSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Mprocess(niter, U, process_list));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ngme_estimateLong_cpp", (DL_FUNC) &_ngme_estimateLong_cpp, 1},
    {"_ngme_estimateFisher", (DL_FUNC) &_ngme_estimateFisher, 1},
    {"_ngme_estimateProcesses_cpp", (DL_FUNC) &_ngme_estimateProcesses_cpp, 1},
    {"_ngme_fisher_cpp", (DL_FUNC) &_ngme_fisher_cpp, 1},
    {"_ngme_predictLong_cpp", (DL_FUNC) &_ngme_predictLong_cpp, 1},
    {"_ngme_rGIG_cpp", (DL_FUNC) &_ngme_rGIG_cpp, 4},
    {"_ngme_simulateLongGH_cpp", (DL_FUNC) &_ngme_simulateLongGH_cpp, 1},
    {"_ngme_simulateLongME_cpp", (DL_FUNC) &_ngme_simulateLongME_cpp, 1},
    {"_ngme_getDuplicateM", (DL_FUNC) &_ngme_getDuplicateM, 1},
    {"_ngme_test_d2_process", (DL_FUNC) &_ngme_test_d2_process, 3},
    {"_ngme_test_sampling_NIG", (DL_FUNC) &_ngme_test_sampling_NIG, 3},
    {"_ngme_test_logf_NIG", (DL_FUNC) &_ngme_test_logf_NIG, 5},
    {"_ngme_test_logf_GH", (DL_FUNC) &_ngme_test_logf_GH, 7},
    {"_ngme_test_dU_EiV", (DL_FUNC) &_ngme_test_dU_EiV, 10},
    {"_ngme_test_db_EiV_GIG", (DL_FUNC) &_ngme_test_db_EiV_GIG, 3},
    {"_ngme_test_EiV_NGIG", (DL_FUNC) &_ngme_test_EiV_NGIG, 7},
    {"_ngme_test_EiV_GIG", (DL_FUNC) &_ngme_test_EiV_GIG, 3},
    {"_ngme_test_PreDiagsolver", (DL_FUNC) &_ngme_test_PreDiagsolver, 1},
    {"_ngme_sampleR", (DL_FUNC) &_ngme_sampleR, 2},
    {"_ngme_sample_internalR", (DL_FUNC) &_ngme_sample_internalR, 4},
    {"_ngme_test_mixed", (DL_FUNC) &_ngme_test_mixed, 4},
    {"_ngme_test_error", (DL_FUNC) &_ngme_test_error, 3},
    {"_ngme_test_mixed_Fisher", (DL_FUNC) &_ngme_test_mixed_Fisher, 4},
    {"_ngme_test_process", (DL_FUNC) &_ngme_test_process, 3},
    {"_ngme_test_Mprocess", (DL_FUNC) &_ngme_test_Mprocess, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ngme(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
